//get key and plaintext strings input
//get ciphertext string output
 
#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include<algorithm>
#include<vector>
using namespace std;

const uint8_t s_box[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const uint8_t rcon[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

void sub_bytes(uint8_t state[4][4]) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            state[i][j] = s_box[state[i][j]];
        }
    }
}

void shift_rows(uint8_t state[4][4]) {
    uint8_t temp[4];
    for (int i = 1; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            temp[j] = state[i][(j + i) % 4];
        }
        for (int j = 0; j < 4; ++j) {
            state[i][j] = temp[j];
        }
    }
}

uint8_t xtime(uint8_t x) {
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
}

void mix_columns(uint8_t state[4][4]) {
    uint8_t temp[4][4];
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            temp[i][j] = state[i][j];
        }
    }

    for (int i = 0; i < 4; ++i) {
        state[0][i] = xtime(temp[0][i]) ^ xtime(temp[1][i]) ^ temp[1][i] ^ temp[2][i] ^ temp[3][i];
        state[1][i] = temp[0][i] ^ xtime(temp[1][i]) ^ xtime(temp[2][i]) ^ temp[2][i] ^ temp[3][i];
        state[2][i] = temp[0][i] ^ temp[1][i] ^ xtime(temp[2][i]) ^ xtime(temp[3][i]) ^ temp[3][i];
        state[3][i] = xtime(temp[0][i]) ^ temp[0][i] ^ temp[1][i] ^ temp[2][i] ^ xtime(temp[3][i]);
    }
}

// 定义AddRoundKey函数
void add_round_key(unsigned char state[][4], unsigned char w[][4], int round) {
    unsigned char roundkey[4][4];
    for (int i = 0; i < 4; i++) {
        roundkey[i][0] = w[4 * round][i];
        roundkey[i][1] = w[4 * round + 1][i];
        roundkey[i][2] = w[4 * round + 2][i];
        roundkey[i][3] = w[4 * round + 3][i];
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i][j] ^= roundkey[i][j];
        }
    }
}

void key_expansion(const uint8_t key[16], uint8_t w[44][4]) {
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            w[i][j] = key[i * 4 + j];
        }
    }

    for (int i = 4; i < 44; ++i) {
        uint8_t temp[4];
        for (int j = 0; j < 4; ++j) {
            temp[j] = w[i - 1][j];
        }

        if (i % 4 == 0) {
            uint8_t k = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = k;

            for (int j = 0; j < 4; ++j) {
                temp[j] = s_box[temp[j]];
            }

            temp[0] = temp[0] ^ rcon[i / 4];
        }

        for (int j = 0; j < 4; ++j) {
            w[i][j] = w[i - 4][j] ^ temp[j];
        }
    }
}

string aes_encrypt(const string &plaintext, const string &key) {
    uint8_t state[4][4];
    uint8_t round_key[44][4];

    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            state[j][i] = plaintext[i * 4 + j];
        }
    }

    key_expansion(reinterpret_cast<const uint8_t *>(key.data()), round_key);

    add_round_key(state, round_key, 0);

    for (int round = 1; round <= 10; ++round) {
        sub_bytes(state);
        shift_rows(state);
        if (round != 10) {
            mix_columns(state);
        }
        add_round_key(state, round_key, round);
    }

    stringstream ciphertext;
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            ciphertext << hex << setw(2) << setfill('0') << static_cast<int>(state[j][i]);
        }
    }

    return ciphertext.str();
}

int main() {
    string plaintext,key;
    cin>>key>>plaintext;
    vector<uint8_t> plaintext_bytes(plaintext.size() / 2);
    vector<uint8_t> key_bytes(key.size() / 2);

    for (size_t i = 0; i < plaintext.size(); i += 2) {
        plaintext_bytes[i / 2] = stoi(plaintext.substr(i, 2), nullptr, 16);
    }

    for (size_t i = 0; i < key.size(); i += 2) {
        key_bytes[i / 2] = stoi(key.substr(i, 2), nullptr, 16);
    }

    string plaintext_str(plaintext_bytes.begin(), plaintext_bytes.end());
    string key_str(key_bytes.begin(), key_bytes.end());

    string cipher = aes_encrypt(plaintext_str, key_str);
    transform(cipher.begin(),cipher.end(),cipher.begin(),::toupper);
    cout<<cipher;
    return 0;
}
